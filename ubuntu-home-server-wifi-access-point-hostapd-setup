#!/bin/bash

# simple script to install hostapd and configure from scratch to act as a wifi access point on boot
# Intended for use on a home server, eg a NUC, with a wifi device to replace the need for an additional
# wifi bridge.  Assumes Ubuntu 14.04.1 with single ethernet configured as dhcp.
# Probably fine with a recent deb system also.
# The system it sets up is a simple bridge between the wifi card and the ethernet device.
# it is assumed that if someone has wifi credentials they are allowed on the lan / server

# Defaults to WPA2 TKIP only, nl80211 driver, GB (UK wifi region), channel 1

# N.B. not all wifi devices / drivers support AP (Access Point) mode.
# would be nice to expand this script to test for this
# sudo apt-get install iw
# iw list and check for AP under "Supported interface modes"

echo
echo "WARNING this script will alter your network configuration, understand what it does before answering y below"
echo
read -e -p "Do you wish to install and configure hostapd and bridge-utils from scratch (y/n): " -i "n" SETUP_HOSTAPD
echo

if [ ! "$SETUP_HOSTAPD" = "y" ]; then
  echo "OK exiting script"
  exit -1
fi

if ! dpkg -s hostadp >/dev/null; then
  echo "hostapd not installed so installing hostapd package"
  sudo apt-get install -q hostapd
  echo
  
  # Get the wifi region, SSID, and passphrase
  echo "Pleae input the following info"
  # see https://en.wikipedia.org/wiki/ISO_3166-1 for country codes
  read -e -p "Wifi region COUNTRY CODE eg GB or US (https://en.wikipedia.org/wiki/ISO_3166-1): " -i "GB" COUNTRY_CODE
  read -e -p "Wifi SSID; ie the name of the wifi network to create: " -i "YTAgitWifi" SSID
  read -e -p "Wifi passphrase; what users will have to use as the password to associate join this Wifi network: " -i "changethissecret" WIFI_PASS
  read -e -p "Wifi CHANNEL ie 1-11 (in UK / GB region g based) " -i "1" CHANNEL
  read -e -p "Do you wish to enable 802.11n capability (y/n): " -i "y" SETUP_80211N


  # Need to find the interface name as previously assumed eth0 but NUC has em1 for first motherboard interface
  # new naming convention; also has p3p1 (for pci slot and port number)
  # ip link show or
  # ls /sys/class/net/ gives on my NUC "em1  lo  wlan0" and on my desktop "docker0  eth0  lo"
  # or "ip route get 8.8.8.8" which gives "8.8.8.8 via 192.168.1.1 dev em1  src 192.168.1.124"
  # so "ip route get 8.8.8.8 | awk '{print $5}'" gives us the 5 column and hence the internet access / LAN interface
  LAN_INTERFACE_NAME=$(ip route get 8.8.8.8 | awk '{print $5}')
  echo
  read -e -p "Lan INTERFACE_NAME eg eth0 or em1 (change if incorrect or <Enter> key if correct) " -i "$LAN_INTERFACE_NAME" LAN_INTERFACE_NAME
  
  
  # Now to enable on boot hostapd startup by un-remarking in /etc/default/hostapd
  echo "Enabling hostapd startup on boot in deamon mode via /etc/default/hostapd"
  sudo sed -i 's/#DAEMON_CONF=""/DAEMON_CONF="\/etc\/hostapd\/hostapd\.conf"/g' /etc/default/hostapd
  
  # N.B. all tees without -a cause an overwrite of the output file
  # also note >/dev/null avoids tee from causing screen output
  # Here we simply unzip the default hostapd config file and put it in /etc/hostapd/hostapd.conf
  # Good resource to have as is loaded with info on a whole bunch of settings; but not all of them though.
  echo "Establishing default config file from /usr/share/doc/hostapd/examples/"
  zcat /usr/share/doc/hostapd/examples/hostapd.conf.gz | sudo tee -a /etc/hostapd/hostapd.conf >/dev/null
  
  # Assuming our wifi driver creates the default interface name of wlan0
  # interface=wlan0 already in the default config
  
  # default is to accept all mac addresses, we are going with this also
  # macaddr_acl=0 already in the default config
  
  # remove # from #bridge=br0
  echo "setting bridge=br0 in /etc/hostapd/hostapd.conf"
  sudo sed -i 's/#bridge=br0/bridge=br0/g' /etc/hostapd/hostapd.conf
  
  # remove # and space from driver and change to nl80211
  echo "setting driver=nl80211"
  sudo sed -i 's/# driver=hostap/driver=nl80211/g' /etc/hostapd/hostapd.conf

  # https://en.wikipedia.org/wiki/ISO_3166-1 for country codes
  # change #country_code=US to country_code=GB
  # N.B. could use double quotes around the lot to use the shell variable ie:-
  # sudo sed -i "s/#country_code=US/country_code=$COUNTRY_CODE/g" /etc/hostapd/hostapd.conf
  # but suspect the following is more robust and consistent:-
  echo "Setting country_code=$COUNTRY_CODE in /etc/hostapd/hostadp.conf"
  sudo sed -i 's/#country_code=US/country_code='"$COUNTRY_CODE"'/g' /etc/hostapd/hostapd.conf
  
  # this would be more complex to sanity check as channels affected by region
  # here we just set to what was requested, default file has channel=1 entry
  echo "Setting channel=$CHANNEL in /etc/hostapd/hostapd.conf"
  sudo sed -i 's/channel=1/channel='"$CHANNEL"'/g' /etc/hostapd/hostapd.conf
  
  # change default ssid from test to our SSID
  echo "Setting ssid=$SSID in /etc/hostapd/hostapd.conf"
  sudo sed -i 's/ssid=test/ssid='"$SSID"'/g' /etc/hostapd/hostapd.conf

  # see http://wireless.kernel.org/en/users/Documentation/hostapd
  # Leaving hw_mode=g default
  # N.B. this is not where one enables 80211n as this operates on top of a or g
  
  # enable wpa2 by changing #wpa=1 into wpa=2 (bit1 = IEEE 802.11i/RSN (WPA2))
  echo "Setting wpa=2 in /etc/hostapd/hostapd.conf"
  sudo sed -i 's/#wpa=1/wpa=2/g' /etc/hostapd/hostapd.conf
  
  # replace “#wpa_passphrase=secret passphrase” with the passphrase
  echo "Setting wpa_passphrase in /etc/hostapd/hostadp.conf"
  sudo sed -i 's/#wpa_passphrase=secret passphrase/wpa_passphrase='"$WIFI_PASS"'/g' /etc/hostapd/hostapd.conf
  
  # replace “#wpa_key_mgmt=WPA-PSK WPA-EAP” with “wpa_key_mgmt=WPA-PSK”
  echo "Setting wpa_key_mgmt=WPA-PSK in /etc/hostapd/hostadp.conf"
  sudo sed -i 's/#wpa_key_mgmt=WPA-PSK WPA-EAP/wpa_key_mgmt=WPA-PSK/g' /etc/hostapd/hostapd.conf
  
  # disable Shared Key Authentication (bit 1) used by WEP
  # replace “auth_algs=3” with “auth_algs=1”
  echo "Setting auth_algs=1 in /etc/hostapd/hostadp.conf"
  sudo sed -i 's/auth_algs=3/auth_algs=1/g' /etc/hostapd/hostapd.conf
  
  # replace “#wpa_pairwise=TKIP CCMP” with “wpa_pairwise=TKIP”
  echo "Setting wpa_pairwise=TKIP /etc/hostapd/hostapd.conf"
  sudo sed -i 's/#wpa_pairwise=TKIP CCMP/wpa_pairwise=TKIP/g' /etc/hostapd/hostapd.conf
  
  # from hostapd.conf:- "Pairwise cipher for RSN/WPA2 (default: use wpa_pairwise value)"
  # replace “#rsn_pairwise=CCMP” with “rsn_pairwise=CCMP”
  echo "Setting rsn_pairwise=CCMP in /etc/hostapd/hostapd.conf"
  sudo sed -i 's/#rsn_pairwise=CCMP/rsn_pairwise=CCMP/g' /etc/hostapd/hostapd.conf

  if [ "$SETUP_80211N" = "y" ]; then
    # have to have enable ieee80211n=1 and wmm_enabled=1 (already set in default file)
    # N.B. if TKIP is an option withing WPA2 (needed for n I think) auth method in rsn_pairwise
    # then max speed can only be 54 Mbps; we have rsn_pairwise=CCMP which is AES (better)
    echo "Setting ieee80211n=1 to enable 802.11n mode"
    sudo sed -i 's/#ieee80211n=1/ieee80211n=1/g' /etc/hostapd/hostapd.conf
  
    # also need to set 802.11n ht_capabilities.
    # could set this depending on channel already selected:-
    # ie for hw_mode=g (ie Band 1 or 2.4GHz):-
    # if channel <=7 then HT40+ ie second channel above primary.
    # else HT40- ie second channel below primary channel
    # One can find the capabilities of the hardware / driver via iw list
    # N.B. Band 1 capabilities on my 7260ac gave "Static SM Power Save" so added [SMPS-STATIC]
    # will need to escape the square brackes as one of "$.*/[\]^"
    echo "Setting ht_capab=[HT40+][SHORT-GI-40][DSSS_CCK-40][SMPS-STATIC]"
    sudo sed -i 's/#ht_capab=\[HT40-\]\[SHORT-GI-20\]\[SHORT-GI-40\]/ht_capab=\[HT40+\]\[SHORT-GI-40\]\[DSSS_CCK-40\]\[SMPS-STATIC\]/g' /etc/hostapd/hostapd.conf
  fi
      
  # install bridge-utils
  # should ask first but then we have to deal with half a config.
  echo
  echo "Installing bridge-utils in order to create br0 on boot and bridge it to $LAN_INTERFACE_NAME"
  echo "hostapd can then add wlan0 to this bridge in its own good time"
  sudo apt-get install -q bridge-utils  
  
  # change the lan configuration from dhcp to manual as br0 can then pickup the dhcp
  # replace “iface $LAN_INTERFACE_NAME inet dhcp” with “iface $LAN_INTERFACE_NAME inet manual”
  echo "Changing 'iface $LAN_INTERFACE_NAME inet dhcp' to 'iface $LAN_INTERFACE_NAME inet manual' in /etc/network/interfaces"
  sudo sed -i 's/iface '"$LAN_INTERFACE_NAME"' inet dhcp/iface '"$LAN_INTERFACE_NAME"' inet manual/g' /etc/network/interfaces
  
  # Add an auto br0 entry and define br0 as a inet dhcp client based on at least eth0
  # hostapd can then add wlan0 to this bridge as per its config in /etc/hostapd/hostapd.conf
  # N.B. need a fix for the indenting here as we are exact piping the following lines and 
  # leading spaces may upset things.
  # Maybe put in function instead.
  echo "entering br0 config in /etc/network/interfaces"
sudo tee -a /etc/network/interfaces >/dev/null <<__EOF

# Add br0 to auto started interfaces
auto br0

# Setup bridge
# hostapd can then add wlan0 to this bridge as per its config in /etc/hostapd/hostapd.conf
iface br0 inet dhcp
bridge_ports $LAN_INTERFACE_NAME

__EOF
  
  echo 
  echo "hostapd Host Access Point Deamon should now be installed an configured."
  echo "As this required network alterations a proper test it to reboot and"
  echo "confirm proper power on functionality."
  echo "If there are network issues review /etc/network/interfaces"
  echo
  echo "Once the network is restarted and hostapd has been started note the following"
  echo "usefull commands:-"
  echo "'brctl show' should have the ethernet & wifi as members"
  echo "'watch -d iw wlan0 station dump' to see the specifications of connections"
  echo "Ctrl+C to exit the watch 'readout'"
  echo
  
  read -e -p "Do you wish to restart the network and start hostapd (y/n): " -i "y" IFDOWNUP_HOSTAPD_START

  if [ "$IFDOWNUP_HOSTAPD_START" = "y" ]; then
    # restart all interfaces except local loopback (lo)
    echo "executing ifdown and ifup on all interfaces except lo"
    sudo ifdown --exclude=lo -a && sudo ifup --exclude=lo -a
    # and then start hostapd
    echo "starting the hostapd service / deamon"
    sudo service hostapd start
  fi
  
else
  echo "hostapd package already installed, please consider removing this package first"
  echo "as this script expects to install and configure this package itself"
  echo "sudo apt-get purge hostapd"
  echo "N.B. WARNING this will remove all previous configurations"
fi